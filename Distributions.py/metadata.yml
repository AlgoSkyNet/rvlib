Normal:
     name: Normal
     spec: ('mu', float32), ('sigma', float32)
     pyname: norm
     loc: self.mu
     scale: self.sigma
     shape: None
     mean: self.mu
     median: self.quantile(.5)
     mode: self.mu
     var: self.sigma ** 2
     std: self.sigma
     skewness: 0.0
     kurtosis: 0.0
     entropy: 0.5 * (np.log(2*np.pi) + 1.0) + np.log(self.sigma)
     mgf: np.exp(x * mu + 0.5 * sigma**2 * x**2)
     cf: np.exp(1j * x * mu - 0.5 * sigma**2 * x**2)
     insupport: -inf < x < inf
     name_doc: Normal
     pdf_tex: p(x;\mu,\sigma)=\frac{1}{\sigma \sqrt{2\pi}}
               e^{-\frac{(x-\mu)^2}{2\sigma^2}}
     param_names: ["mu", "sigma"]
     param_descrs: ["mean of the distribution",
                    "Standard deviation of the distribution"]
     string: Normal(mu=%.5f, sigma=%.5f)

Chisq:
     name: Chisq
     spec: ('v', int32)
     pyname: chisq
     loc: None
     scale: None
     shape: self.v
     mean: self.v
     median: self.quantile(.5)
     mode: max(self.v - 2, 0)
     var: self.v * 2.0
     std: np.sqrt(self.v * 2.0)
     skewness: np.sqrt(8.0 / self.v)
     kurtosis: 12.0 / self.v
     entropy: .5 * self.v +  np.log(2.0) + lgamma(.5 * self.v) + 
               (1.0 - .5 * self.v) * digamma(.5 * self.v)
     mgf: (1.0 - 2.0 * x)**(-v * 0.5)
     cf: (1.0 - 2.0 * 1j * x)**(-v * 0.5)
     insupport: 0 <= x < inf
     name_doc: Chi squared
     pdf_tex: p(x; k)= \frac{x^{k/2 - 1} e^{-x/2}}{2^{k/2} 
               \Gamma(k/2)}, x > 0
     param_names: ["k"]
     param_descrs: ["Degrees of Freedom"]
     string: ChiSquared(k=%.5f)


Uniform:
     name: Uniform
     spec: ('a', float32), ('b', float32)
     pyname: unif
     loc: self.a
     scale: self.b - self.a
     shape: None
     mean: .5 * (self.a + self.b)
     median: .5 * (self.a + self.b)
     mode: None
     var: (self.b - self.a)**2/12
     std: (self.b - self.a)/np.sqrt(12)
     skewness: 0
     kurtosis: -1.2
     entropy: np.log(self.b - self.a)
     mgf: (np.exp(x * b) - np.exp(x * a))/(x * (b - a)) if x != 0 else 1
     cf: (np.exp(1j * x * b) - np.exp(1j * x * a))/(1j * x * (b - a))
     insupport: a <= x < b
     name_doc: Uniform
     pdf_tex: p(x; a, b) = \frac{1}{b-a}; a \leq x \leq b
     param_names: ["a", "b"]
     param_descrs: ["Lower Bound", "Upper Bound"]
     string: Uniform(a=%.5f, b=%.5f)

T:
     name: T
     spec: ('v', int32)
     pyname: tdist
     loc: None
     scale: None
     shape: self.v
     mean: 0
     median: 0
     mode: 0
     var: self.v/(self.v - 2) if self.v > 2 else inf
     std: np.sqrt(self.v/(self.v - 2)) if self.v > 2 else inf
     skewness: 0 if self.v > 3 else None
     kurtosis: 6/(self.v - 4) if self.v > 4 else inf
     entropy: .5*(self.v + 1)*(digamma(.5*(self.v + 1)) - 
               digamma(.5*self.v)) + np.log(np.sqrt(self.v) * 
               beta(.5*self.v, .5))
     mgf: None
     cf: None
     insupport: -inf <= x < inf
     name_doc: T 
     pdf_tex: p(x;df)= \frac{G \left(\frac{df+1}{2}\right)}{\sqrt{df\pi}
                G\left(\frac{df}{2} \right)}   
                \left(1 + \frac{x^2}{df} \right)^{- \frac{df+1}{2}} 
                \n where :math:`G(\cdot)` is the Gamma function
     param_names: ["df"]
     param_descrs: ["Degrees of freedom (real, >0)"]
     string: T(df=%.5f)

LogNormal:
     name: LogNormal
     spec: ('mu', float32), ('sigma', float32)
     pyname: lnorm
     loc: self.mu
     scale: self.sigma
     shape: None
     mean: np.exp(self.mu + .5* self.sigma**2)
     median: np.exp(self.mu)
     mode: np.exp(self.mu - self.sigma**2)
     var: (np.exp(self.sigma**2) - 1) * np.exp(2*self.mu + self.sigma**2)
     std: np.sqrt(self.var)
     skewness: (np.exp(self.sigma**2) + 2) * np.sqrt(np.exp(self.sigma**2) - 1)
     kurtosis: np.exp(4*self.sigma**2) + 2*np.exp(3*self.sigma**2)
               + 3*np.exp(2*self.sigma**2) - 6
     entropy: np.log(self.sigma*np.exp(self.mu + .5)*np.sqrt(2*np.pi))
     mgf: None
     cf: None
     insupport: 0 < x < inf
     name_doc: Log-normal 
     pdf_tex: p(x; \mu, \sigma) = \frac{1}{x \sqrt{2 \pi \sigma^2}}
               \exp \left( - \frac{(\log(x) - \mu)^2}{2 \sigma^2}\right)
     param_names: ["mu", "sigma"]
     param_descrs: ["Log-scale (mean of log of RV)",
                    "Shape parameter (must be >0, std. of log of RV)"]
     string: LogNormal(mu=%.5f, sigma=%.5f)

F:
     name: F
     spec: ('v1', float32), ('v2', float32)
     pyname: fdist
     loc: None
     scale: None
     shape: (self.v1, self.v2)
     mean: self.v2/(self.v2 - 2) if self.v2 > 2 else inf
     median: None
     mode: (self.v1 - 2)/self.v1 * self.v2/(self.v2 + 2) if self.v1 > 2 else inf
     var: 2*self.v2**2*(self.v1 + self.v2 - 2)/
          (self.v1*(self.v2 - 2)**2*(self.v2 - 4)) if self.v2 > 4 else inf
     std: np.sqrt(self.var)
     skewness: (2*self.v1 + self.v2 - 2)*np.sqrt(8*(self.v2 - 4))/
               ((self.v2 - 6)*np.sqrt(self.v1*(self.v1+self.v2-2))) 
               if self.v2 > 6 else inf
     kurtosis: 3 + 12*(self.v1*(5*self.v2 - 22)*(self.v1+self.v2-2) + 
               (self.v2 - 4)*(self.v2 - 2)**2)/
               (self.v1*(self.v2-6)*(self.v2-8)*(self.v1+self.v2-2))
     entropy: None
     mgf: None
     cf: None
     insupport: 0 <= x < inf
     name_doc: F
     pdf_tex: p(x; d_1, d_2) = \frac{1}{x B(d_1/2, d_2/2)}
               \sqrt{\frac{(d_1 x)^{d_1} \cdot 
               d_2^{d_2}}{(d_1 x + d_2)^{d_1 + d_2}}}
     param_names: ["d1", "d2"]
     param_descrs: ["Numerator degrees of freedom (must be >0)",
                    "Denominator degrees of freedom (must be >0)"]
     string: F(d1=%.5f, d2=%.5f)